package com.apm.payments.models;

import com.apm.payments.enums.PaymentMethodType;
import com.apm.payments.enums.ProviderType;

import java.io.Serializable;

/**
 * Created by Ing. Oscar G. Medina Cruz on 04/07/18.
 */
public class PaymentDataBuilder implements Serializable {
    private PaymentData paymentData;

    public PaymentDataBuilder() {
        paymentData = new PaymentData();
    }

    /**
     * Establishes the payment source id
     *
     * @param paymentSourceId The payment source id to do the payment
     * @return {@link PaymentDataBuilder} instance
     */
    public PaymentDataBuilder paymentSourceId(String paymentSourceId) {
        paymentData.paymentSourceId(paymentSourceId);
        return this;
    }

    /**
     * Establishes the payment method id
     *
     * @param paymentMethodId The provider method id to do the payment
     * @return {@link PaymentDataBuilder} instance
     */
    public PaymentDataBuilder paymentMethodId(int paymentMethodId) {
        paymentData.paymentMethodId(paymentMethodId);
        return this;
    }

    /**
     * Establishes the payment method type
     *
     * @param method The {@link PaymentMethodType} to do the payment
     * @return {@link PaymentDataBuilder} instance
     */
    public PaymentDataBuilder method(PaymentMethodType method) {
        paymentData.method(method);
        return this;
    }

    /**
     * Establishes the currency
     *
     * @param currency The payment currency to do the payment
     * @return {@link PaymentDataBuilder} instance
     */
    public PaymentDataBuilder currency(String currency) {
        paymentData.currency(currency);
        return this;
    }

    /**
     * Establishes the device session id generated by OneSignal
     *
     * @param deviceSessionId Device session id generated by OneSignal SDK
     * @return {@link PaymentDataBuilder} instance
     */
    public PaymentDataBuilder deviceSessionId(String deviceSessionId) {
        paymentData.deviceSessionId(deviceSessionId);
        return this;
    }

    /**
     * Establishes the provider type from provider list
     *
     * @param provider The {@link ProviderType} to do the payment
     * @return {@link PaymentDataBuilder} instance
     */
    public PaymentDataBuilder provider(ProviderType provider) {
        paymentData.provider(provider);
        return this;
    }

    private void copyInto(PaymentData paymentData) {
        paymentData.currency(this.paymentData.getCurrency());
        paymentData.deviceSessionId(this.paymentData.getDeviceSessionId());
        paymentData.method(this.paymentData.getMethod());
        paymentData.paymentMethodId(this.paymentData.getPaymentMethodId());
        paymentData.paymentSourceId(this.paymentData.getPaymentSourceId());
        paymentData.provider(this.paymentData.getProvider());
    }

    public PaymentData build() {
        return paymentData;
    }

    public <T extends PaymentData> T build(Class<T> tClass) {
        try {
            T instance = tClass.newInstance();
            copyInto(instance);
            return instance;
        } catch (InstantiationException | IllegalAccessException e) {
            e.printStackTrace();
        }
        return null;
    }
}
